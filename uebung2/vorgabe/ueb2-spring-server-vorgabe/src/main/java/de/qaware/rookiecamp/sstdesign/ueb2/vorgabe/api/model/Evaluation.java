package de.qaware.rookiecamp.sstdesign.ueb2.vorgabe.api.model;

import io.swagger.annotations.ApiModelProperty;
import io.swagger.annotations.ApiParam;
import org.springframework.web.bind.annotation.RequestParam;

import javax.annotation.Generated;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;

public class Evaluation {

    @ApiModelProperty(value="autogenerated ID")
    private int evaluationId;

    @Min(0)
    @Max(100)
    @ApiModelProperty(value = "taste rating from 0=horseshit to 100=awesome",required = true,example = "42")
    private int taste;

    @Min(0)
    @Max(100)
    @ApiModelProperty(value = "creama and looks rating from 0='modern art' to 100=awesome",required = true,example = "42")
    private int look;

    @ApiModelProperty(value = "Describe your taste experience",required = false,example = "i really like the taste of chocolate")
    private String remarks;

    @ApiModelProperty(value = "EmployeeID of employee that evaluated the coffee",required = true ,example = "42")
    private int employeeID;

    @ApiModelProperty(value = "Time Period identified by timePeriodID that was evaluated and rated",required = true,example = "42")
    private int timePeriodID;

    @ApiModelProperty(value = "BeverageID of the beverage that was consumed by the employee that rated the coffe",required = true,example = "42")
    private int beverageID;

    public Evaluation() {
    }

    public int getEvaluationId() {
        return evaluationId;
    }

    public void setEvaluationId(int evaluationId) {
        this.evaluationId = evaluationId;
    }

    public int getTaste() {
        return taste;
    }

    public void setTaste(int taste) {
        this.taste = taste;
    }

    public int getLook() {
        return look;
    }

    public void setLook(int look) {
        this.look = look;
    }

    public String getRemarks() {
        return remarks;
    }

    public void setRemarks(String remarks) {
        this.remarks = remarks;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Evaluation that = (Evaluation) o;

        if (evaluationId != that.evaluationId) return false;
        if (taste != that.taste) return false;
        if (look != that.look) return false;
        return remarks != null ? remarks.equals(that.remarks) : that.remarks == null;
    }

    @Override
    public int hashCode() {
        int result = evaluationId;
        result = 31 * result + taste;
        result = 31 * result + look;
        result = 31 * result + (remarks != null ? remarks.hashCode() : 0);
        return result;
    }

    @Override
    public String toString() {
        return "Evaluation{" +
                "evaluationId=" + evaluationId +
                ", taste=" + taste +
                ", look=" + look +
                ", remarks='" + remarks + '\'' +
                '}';
    }
}
